package fr.sorway.soguard.services;

import fr.sorway.soguard.Constants;
import fr.sorway.soguard.SoVulnGuard;
import fr.sorway.soguard.data.Advisory;
import fr.sorway.soguard.images.CompanyImages;
import fr.sorway.soguard.includes.HTMLParser;
import fr.sorway.soguard.services.database.DatabaseService;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.channel.concrete.TextChannel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

public class VulnerabilityService {
    private final Logger logger = LoggerFactory.getLogger(VulnerabilityService.class);
    private final SoVulnGuard instance;
    private final DatabaseService databaseService;
    private final VulnerabilitiesRSSReader rssReader;

    public VulnerabilityService(SoVulnGuard instance) {
        this.instance = instance;
        this.databaseService = instance.getDatabaseService();
        this.rssReader = new VulnerabilitiesRSSReader();
    }

    public void searchVulnerabilities() {
        logger.info("Searching for new vulnerabilities...");

        logger.info("Fetching vulnerabilities from {}...", Constants.ANSSI_ALERT);
        final List<Advisory> advisories = new ArrayList<>(rssReader.readAdvisories(Constants.ANSSI_ALERT));

        logger.info("Fetching vulnerabilities from {}...", Constants.ADVISORIES_URL);
        advisories.addAll(rssReader.readAdvisories(Constants.ADVISORIES_URL));

        logger.info("{} Vulnerabilities found.", advisories.size());
        for (Advisory advisory : advisories) {
            if (!isRegistered(advisory.link()))
                sendNotification(advisory);
        }
    }

    public void registerVulnerability(String link) {
        try {
            final PreparedStatement statement = databaseService.getConnection().prepareStatement("INSERT INTO Vulnerabilities (link, processed_at) VALUES (?, ?);");
            statement.setString(1, link);
            statement.setTimestamp(2, new Timestamp(System.currentTimeMillis()));
            statement.executeUpdate();
            statement.getConnection().close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public int getVulnerabilitiesCount() {
        final AtomicInteger count = new AtomicInteger(0);

        try {
            final PreparedStatement statement = databaseService.getConnection().prepareStatement("SELECT COUNT(*) FROM Vulnerabilities WHERE processed_at >= CURDATE() AND processed_at < CURDATE() + INTERVAL 1 DAY;");
            final ResultSet resultSet = statement.executeQuery();
            if (resultSet.next())
                count.set(resultSet.getInt(1));
            statement.getConnection().close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return count.get();
    }

    public boolean isRegistered(String link) {
        final AtomicBoolean isRegistered = new AtomicBoolean(false);

        try {
            final PreparedStatement statement = databaseService.getConnection().prepareStatement("SELECT * FROM Vulnerabilities WHERE link = ?");
            statement.setString(1, link);
            final ResultSet resultSet = statement.executeQuery();
            isRegistered.set(resultSet.next());
            statement.getConnection().close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return isRegistered.get();
    }

    private void sendNotification(Advisory advisory) {
        final Guild guild = instance.getDiscordAPIManager().getShardManager().getGuildById(instance.getConfiguration().guild());
        if (guild == null) {
            logger.error("Guild {} not found!", instance.getConfiguration().guild());
            return;
        }

        final TextChannel channel = guild.getTextChannelById(instance.getConfiguration().channel());
        if (channel == null) {
            logger.error("Channel {} not found!", instance.getConfiguration().channel());
            return;
        }

        final Optional<CompanyImages> imagesOptional = CompanyImages.getImages(advisory.title());
        final EmbedBuilder embed = new EmbedBuilder();
        imagesOptional.ifPresent(_ -> embed.setImage(imagesOptional.get().getUrl()));
        embed.addField("Lien", advisory.link(), false);
        embed.setColor(advisory.link().contains("alerte") ? Color.decode("#d63031") : Color.decode("#fdcb6e"));
        embed.setTimestamp(advisory.pubDate().toInstant());
        embed.setTitle(advisory.title());
        embed.setDescription(HTMLParser.parseHtmlToDiscordMessage(advisory.description()));

        channel.sendMessageEmbeds(embed.build()).queue();
        registerVulnerability(advisory.link());
    }
}
